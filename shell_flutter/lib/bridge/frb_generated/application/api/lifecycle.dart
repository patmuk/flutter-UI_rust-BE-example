// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../domain/effects.dart';
import '../../domain/todo_list.dart';
import '../../frb_generated.dart';
import '../../lib.dart';
import '../application/api/lifecycle.dart';
import '../processing_errors.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'lifecycle.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `init`, `process`, `setup`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

Future<List<Effect>> processCqrs({required Cqrs cqrs}) =>
    RustLib.instance.api.crateApplicationApiLifecycleProcessCqrs(cqrs: cqrs);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AppConfig>>
abstract class AppConfig implements RustOpaqueInterface {
  PathBuf get appStateFilePath;

  set appStateFilePath(PathBuf appStateFilePath);

  static Future<AppConfig> default_() =>
      RustLib.instance.api.crateApplicationApiLifecycleAppConfigDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Lifecycle>>
abstract class Lifecycle implements RustOpaqueInterface {
  static Future<void> get_() =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleGet();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<void> newInstance({String? path}) =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleNew(path: path);

  Future<void> shutdown();
}

@freezed
sealed class Cqrs with _$Cqrs {
  const Cqrs._();

  const factory Cqrs.todoCommand(
    TodoCommand field0,
  ) = Cqrs_TodoCommand;
  const factory Cqrs.todoQuery(
    TodoQuery field0,
  ) = Cqrs_TodoQuery;

  Future<bool> isCommand() => should_not_reach_here;

  Future<bool> isQuery() => should_not_reach_here;
}

class Cqrs_test {
  const Cqrs_test();

  Future<TodoCommand> todoCommandAddTodo({required String todo}) =>
      RustLib.instance.api
          .crateApplicationApiLifecycleCqrsTestTodoCommandAddTodo(
              that: this, todo: todo);

  Future<TodoQuery> todoQueryAllTodos() => RustLib.instance.api
          .crateApplicationApiLifecycleCqrsTestTodoQueryAllTodos(
        that: this,
      );

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Cqrs_test && runtimeType == other.runtimeType;
}

@freezed
sealed class TodoCommand with _$TodoCommand {
  const TodoCommand._();

  const factory TodoCommand.addTodo(
    String field0,
  ) = TodoCommand_AddTodo;
  const factory TodoCommand.removeTodo(
    BigInt field0,
  ) = TodoCommand_RemoveTodo;
  const factory TodoCommand.cleanList() = TodoCommand_CleanList;
}

enum TodoQuery {
  allTodos,
  ;

  Future<bool> isCommand() =>
      RustLib.instance.api.crateApplicationApiLifecycleTodoQueryIsCommand(
        that: this,
      );

  Future<bool> isQuery() =>
      RustLib.instance.api.crateApplicationApiLifecycleTodoQueryIsQuery(
        that: this,
      );
}
