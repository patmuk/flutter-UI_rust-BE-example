// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../domain/effects.dart';
import '../../domain/todo_list.dart';
import '../../frb_generated.dart';
import '../../lib.dart';
import '../app_state.dart';
import '../processing_errors.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'lifecycle.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `init`, `inner_process_cqrs`, `setup`
// These functions are ignored because they have generic arguments: `process_cqrs`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

Future<List<Effect>> processCqrs({required WrappedCqrs wrappedCqrs}) =>
    RustLib.instance.api
        .crateApplicationApiLifecycleProcessCqrs(wrappedCqrs: wrappedCqrs);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AppConfig>>
abstract class AppConfig implements RustOpaqueInterface {
  PathBuf get appStateFilePath;

  set appStateFilePath(PathBuf appStateFilePath);

  static Future<AppConfig> default_() =>
      RustLib.instance.api.crateApplicationApiLifecycleAppConfigDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Lifecycle>>
abstract class Lifecycle implements RustOpaqueInterface {
  static Future<void> get_() =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleGet();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<void> newInstance({String? path}) =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleNew(path: path);

  Future<void> shutdown();
}

abstract class Wrapping {
  Future<List<Effect>> process({required AppState appState});

  Future<WrappedCqrs> wrap();
}

@freezed
sealed class WrappedCqrs with _$WrappedCqrs {
  const WrappedCqrs._();

  const factory WrappedCqrs.todoCommand(
    TodoCommand field0,
  ) = WrappedCqrs_TodoCommand;
  const factory WrappedCqrs.todoQuery(
    TodoQuery field0,
  ) = WrappedCqrs_TodoQuery;
}
