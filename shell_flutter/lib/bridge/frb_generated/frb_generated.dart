// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'application/api/lifecycle.dart';
import 'application/app_config.dart';
import 'application/app_state.dart';
import 'dart:async';
import 'dart:convert';
import 'domain/todo_category.dart';
import 'domain/todo_list.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'infrastructure/app_state_db_persister.dart';
import 'infrastructure/app_state_file_persister.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -1964417815;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'app_core',
    ioDirectory: '../app_core/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<ProcessingError>
      crateInfrastructureAppStateDbPersisterAppStateDbPersisterErrorToProcessingError(
          {required AppStateDbPersisterError that});

  Future<ProcessingError>
      crateInfrastructureAppStateFilePersisterAppStateFilePersisterErrorToProcessingError(
          {required AppStateFilePersisterError that});

  Future<bool> crateApplicationAppStateAppStateImplDirtyFlagValue(
      {required AppStateImpl that});

  Future<void> crateApplicationAppStateAppStateImplMarkDirty(
      {required AppStateImpl that});

  Future<void> crateApplicationAppStateAppStateImplMarkPersisted(
      {required AppStateImpl that});

  AppConfigImpl
      crateApplicationApiLifecycleLifecycleImplAutoAccessorGetAppConfig(
          {required LifecycleImpl that});

  void crateApplicationApiLifecycleLifecycleImplAutoAccessorSetAppConfig(
      {required LifecycleImpl that, required AppConfigImpl appConfig});

  Future<void> crateApplicationApiLifecycleLifecycleImplGetSingleton();

  Future<void> crateApplicationApiLifecycleLifecycleImplInitialise(
      {String? appStateUrl});

  Future<void> crateApplicationApiLifecycleLifecycleImplPersist();

  Future<void> crateApplicationApiLifecycleLifecycleImplShutdown();

  Future<TodoCategoryModel> crateDomainTodoCategoryTodoCategoryModelDefault();

  Future<String> crateDomainTodoCategoryTodoCategoryModelGetTitle(
      {required TodoCategoryModel that});

  Future<TodoListModelLock>
      crateDomainTodoCategoryTodoCategoryModelGetTodoListLock(
          {required TodoCategoryModel that});

  Future<List<String>> crateDomainTodoCategoryTodoCategoryModelGetTodos(
      {required TodoCategoryModel that});

  Future<TodoListModel> crateDomainTodoListTodoListModelDefault();

  Future<List<String>> crateDomainTodoListTodoListModelGetTodosAsString(
      {required TodoListModel that});

  Future<void> crateApplicationAppConfigAppConfigImplBorrowAppStateUrl(
      {required AppConfigImpl that});

  Future<AppConfigImpl> crateApplicationAppConfigAppConfigImplNew(
      {String? url});

  Future<List<Effect>>
      crateApplicationApiLifecycleTodoCategoryModelCommandProcess(
          {required TodoCategoryModelCommand that});

  Future<TodoCategoryModelLock>
      crateDomainTodoCategoryTodoCategoryModelLockForModel(
          {required TodoCategoryModel model});

  Future<List<Effect>>
      crateApplicationApiLifecycleTodoCategoryModelQueryProcess(
          {required TodoCategoryModelQuery that});

  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelCommandProcess(
      {required TodoListModelCommand that});

  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockDefault();

  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockForModel(
      {required TodoListModel model});

  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelQueryProcess(
      {required TodoListModelQuery that});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateDbPersisterError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateDbPersisterError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AppStateDbPersisterErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateFilePersisterError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateFilePersisterError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AppStateFilePersisterErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateImpl;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AppStateImplPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LifecycleImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LifecycleImpl;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LifecycleImplPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TodoCategoryModel;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TodoCategoryModel;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TodoCategoryModelPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TodoListModel;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TodoListModel;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TodoListModelPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<ProcessingError>
      crateInfrastructureAppStateDbPersisterAppStateDbPersisterErrorToProcessingError(
          {required AppStateDbPersisterError that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_processing_error,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateInfrastructureAppStateDbPersisterAppStateDbPersisterErrorToProcessingErrorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateInfrastructureAppStateDbPersisterAppStateDbPersisterErrorToProcessingErrorConstMeta =>
          const TaskConstMeta(
            debugName: "AppStateDbPersisterError_to_processing_error",
            argNames: ["that"],
          );

  @override
  Future<ProcessingError>
      crateInfrastructureAppStateFilePersisterAppStateFilePersisterErrorToProcessingError(
          {required AppStateFilePersisterError that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_processing_error,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateInfrastructureAppStateFilePersisterAppStateFilePersisterErrorToProcessingErrorConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateInfrastructureAppStateFilePersisterAppStateFilePersisterErrorToProcessingErrorConstMeta =>
          const TaskConstMeta(
            debugName: "AppStateFilePersisterError_to_processing_error",
            argNames: ["that"],
          );

  @override
  Future<bool> crateApplicationAppStateAppStateImplDirtyFlagValue(
      {required AppStateImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationAppStateAppStateImplDirtyFlagValueConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationAppStateAppStateImplDirtyFlagValueConstMeta =>
          const TaskConstMeta(
            debugName: "AppStateImpl_dirty_flag_value",
            argNames: ["that"],
          );

  @override
  Future<void> crateApplicationAppStateAppStateImplMarkDirty(
      {required AppStateImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationAppStateAppStateImplMarkDirtyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApplicationAppStateAppStateImplMarkDirtyConstMeta =>
      const TaskConstMeta(
        debugName: "AppStateImpl_mark_dirty",
        argNames: ["that"],
      );

  @override
  Future<void> crateApplicationAppStateAppStateImplMarkPersisted(
      {required AppStateImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationAppStateAppStateImplMarkPersistedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationAppStateAppStateImplMarkPersistedConstMeta =>
          const TaskConstMeta(
            debugName: "AppStateImpl_mark_persisted",
            argNames: ["that"],
          );

  @override
  AppConfigImpl
      crateApplicationApiLifecycleLifecycleImplAutoAccessorGetAppConfig(
          {required LifecycleImpl that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_app_config_impl,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleLifecycleImplAutoAccessorGetAppConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplAutoAccessorGetAppConfigConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_auto_accessor_get_app_config",
            argNames: ["that"],
          );

  @override
  void crateApplicationApiLifecycleLifecycleImplAutoAccessorSetAppConfig(
      {required LifecycleImpl that, required AppConfigImpl appConfig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
            that, serializer);
        sse_encode_app_config_impl(appConfig, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleLifecycleImplAutoAccessorSetAppConfigConstMeta,
      argValues: [that, appConfig],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplAutoAccessorSetAppConfigConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_auto_accessor_set_app_config",
            argNames: ["that", "appConfig"],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplGetSingleton() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleLifecycleImplGetSingletonConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplGetSingletonConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_get_singleton",
            argNames: [],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplInitialise(
      {String? appStateUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(appStateUrl, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplInitialiseConstMeta,
      argValues: [appStateUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplInitialiseConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_initialise",
            argNames: ["appStateUrl"],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplPersist() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_processing_error,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplPersistConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplPersistConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_persist",
            argNames: [],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplShutdown() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_processing_error,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplShutdownConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplShutdownConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_shutdown",
            argNames: [],
          );

  @override
  Future<TodoCategoryModel> crateDomainTodoCategoryTodoCategoryModelDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoCategoryTodoCategoryModelDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoCategoryTodoCategoryModelDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "TodoCategoryModel_default",
        argNames: [],
      );

  @override
  Future<String> crateDomainTodoCategoryTodoCategoryModelGetTitle(
      {required TodoCategoryModel that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoCategoryTodoCategoryModelGetTitleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateDomainTodoCategoryTodoCategoryModelGetTitleConstMeta =>
          const TaskConstMeta(
            debugName: "TodoCategoryModel_get_title",
            argNames: ["that"],
          );

  @override
  Future<TodoListModelLock>
      crateDomainTodoCategoryTodoCategoryModelGetTodoListLock(
          {required TodoCategoryModel that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_todo_list_model_lock,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateDomainTodoCategoryTodoCategoryModelGetTodoListLockConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateDomainTodoCategoryTodoCategoryModelGetTodoListLockConstMeta =>
          const TaskConstMeta(
            debugName: "TodoCategoryModel_get_todo_list_lock",
            argNames: ["that"],
          );

  @override
  Future<List<String>> crateDomainTodoCategoryTodoCategoryModelGetTodos(
      {required TodoCategoryModel that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoCategoryTodoCategoryModelGetTodosConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateDomainTodoCategoryTodoCategoryModelGetTodosConstMeta =>
          const TaskConstMeta(
            debugName: "TodoCategoryModel_get_todos",
            argNames: ["that"],
          );

  @override
  Future<TodoListModel> crateDomainTodoListTodoListModelDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "TodoListModel_default",
        argNames: [],
      );

  @override
  Future<List<String>> crateDomainTodoListTodoListModelGetTodosAsString(
      {required TodoListModel that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelGetTodosAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateDomainTodoListTodoListModelGetTodosAsStringConstMeta =>
          const TaskConstMeta(
            debugName: "TodoListModel_get_todos_as_string",
            argNames: ["that"],
          );

  @override
  Future<void> crateApplicationAppConfigAppConfigImplBorrowAppStateUrl(
      {required AppConfigImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_config_impl(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationAppConfigAppConfigImplBorrowAppStateUrlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationAppConfigAppConfigImplBorrowAppStateUrlConstMeta =>
          const TaskConstMeta(
            debugName: "app_config_impl_borrow_app_state_url",
            argNames: ["that"],
          );

  @override
  Future<AppConfigImpl> crateApplicationAppConfigAppConfigImplNew(
      {String? url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_app_config_impl,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationAppConfigAppConfigImplNewConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApplicationAppConfigAppConfigImplNewConstMeta =>
      const TaskConstMeta(
        debugName: "app_config_impl_new",
        argNames: ["url"],
      );

  @override
  Future<List<Effect>>
      crateApplicationApiLifecycleTodoCategoryModelCommandProcess(
          {required TodoCategoryModelCommand that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_todo_category_model_command(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_effect,
        decodeErrorData: sse_decode_processing_error,
      ),
      constMeta:
          kCrateApplicationApiLifecycleTodoCategoryModelCommandProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleTodoCategoryModelCommandProcessConstMeta =>
          const TaskConstMeta(
            debugName: "todo_category_model_command_process",
            argNames: ["that"],
          );

  @override
  Future<TodoCategoryModelLock>
      crateDomainTodoCategoryTodoCategoryModelLockForModel(
          {required TodoCategoryModel model}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
            model, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_todo_category_model_lock,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoCategoryTodoCategoryModelLockForModelConstMeta,
      argValues: [model],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateDomainTodoCategoryTodoCategoryModelLockForModelConstMeta =>
          const TaskConstMeta(
            debugName: "todo_category_model_lock_for_model",
            argNames: ["model"],
          );

  @override
  Future<List<Effect>>
      crateApplicationApiLifecycleTodoCategoryModelQueryProcess(
          {required TodoCategoryModelQuery that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_todo_category_model_query(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_effect,
        decodeErrorData: sse_decode_processing_error,
      ),
      constMeta:
          kCrateApplicationApiLifecycleTodoCategoryModelQueryProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleTodoCategoryModelQueryProcessConstMeta =>
          const TaskConstMeta(
            debugName: "todo_category_model_query_process",
            argNames: ["that"],
          );

  @override
  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelCommandProcess(
      {required TodoListModelCommand that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_todo_list_model_command(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_effect,
        decodeErrorData: sse_decode_processing_error,
      ),
      constMeta:
          kCrateApplicationApiLifecycleTodoListModelCommandProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleTodoListModelCommandProcessConstMeta =>
          const TaskConstMeta(
            debugName: "todo_list_model_command_process",
            argNames: ["that"],
          );

  @override
  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_todo_list_model_lock,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelLockDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelLockDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "todo_list_model_lock_default",
        argNames: [],
      );

  @override
  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockForModel(
      {required TodoListModel model}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            model, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_todo_list_model_lock,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelLockForModelConstMeta,
      argValues: [model],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelLockForModelConstMeta =>
      const TaskConstMeta(
        debugName: "todo_list_model_lock_for_model",
        argNames: ["model"],
      );

  @override
  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelQueryProcess(
      {required TodoListModelQuery that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_todo_list_model_query(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_effect,
        decodeErrorData: sse_decode_processing_error,
      ),
      constMeta:
          kCrateApplicationApiLifecycleTodoListModelQueryProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleTodoListModelQueryProcessConstMeta =>
          const TaskConstMeta(
            debugName: "todo_list_model_query_process",
            argNames: ["that"],
          );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateDbPersisterError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateDbPersisterError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateFilePersisterError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateFilePersisterError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateImpl => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateImpl => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LifecycleImpl => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LifecycleImpl => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TodoCategoryModel => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TodoCategoryModel => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TodoListModel => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TodoListModel => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  TodoCategoryModel
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
        raw);
  }

  @protected
  TodoListModel
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
        raw);
  }

  @protected
  AppStateDbPersisterError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateDbPersisterErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  AppStateFilePersisterError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateFilePersisterErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  AppStateImpl
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoCategoryModel
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoCategoryModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoListModel
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoListModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppStateDbPersisterError
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateDbPersisterErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  AppStateFilePersisterError
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateFilePersisterErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  AppStateImpl
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoCategoryModel
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoCategoryModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoListModel
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoListModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppStateDbPersisterError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateDbPersisterErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  AppStateFilePersisterError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateFilePersisterErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  AppStateImpl
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoCategoryModel
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoCategoryModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoListModel
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoListModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AppConfig dco_decode_TraitDef_AppConfig(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  AppState dco_decode_TraitDef_AppState(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  AppStatePersistError dco_decode_TraitDef_AppStatePersistError(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  Cqrs dco_decode_TraitDef_Cqrs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  CqrsModel dco_decode_TraitDef_CqrsModel(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  CqrsModelLock dco_decode_TraitDef_CqrsModelLock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  Lifecycle dco_decode_TraitDef_Lifecycle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  AppConfigImpl dco_decode_app_config_impl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AppConfigImpl(
      appStateUrl: dco_decode_String(arr[0]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AppConfigImpl dco_decode_box_autoadd_app_config_impl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_app_config_impl(raw);
  }

  @protected
  TodoCategoryModelCommand dco_decode_box_autoadd_todo_category_model_command(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_category_model_command(raw);
  }

  @protected
  TodoCategoryModelLock dco_decode_box_autoadd_todo_category_model_lock(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_category_model_lock(raw);
  }

  @protected
  TodoCategoryModelQuery dco_decode_box_autoadd_todo_category_model_query(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_category_model_query(raw);
  }

  @protected
  TodoCategoryProcessingError
      dco_decode_box_autoadd_todo_category_processing_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_category_processing_error(raw);
  }

  @protected
  TodoItem dco_decode_box_autoadd_todo_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_item(raw);
  }

  @protected
  TodoListModelCommand dco_decode_box_autoadd_todo_list_model_command(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_model_command(raw);
  }

  @protected
  TodoListModelLock dco_decode_box_autoadd_todo_list_model_lock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_model_lock(raw);
  }

  @protected
  TodoListModelQuery dco_decode_box_autoadd_todo_list_model_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_model_query(raw);
  }

  @protected
  TodoListProcessingError dco_decode_box_autoadd_todo_list_processing_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_processing_error(raw);
  }

  @protected
  Effect dco_decode_effect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Effect_TodoListModelRenderTodoList(
          dco_decode_box_autoadd_todo_list_model_lock(raw[1]),
        );
      case 1:
        return Effect_TodoListModelRenderTodoItem(
          dco_decode_box_autoadd_todo_item(raw[1]),
        );
      case 2:
        return Effect_TodoCategoryModelRenderTodoCategoryModel(
          dco_decode_box_autoadd_todo_category_model_lock(raw[1]),
        );
      case 3:
        return Effect_TodoCategoryModelRenderTodoCategory(
          dco_decode_String(raw[1]),
        );
      case 4:
        return Effect_TodoCategoryModelRenderTodoList(
          dco_decode_box_autoadd_todo_list_model_lock(raw[1]),
        );
      case 5:
        return Effect_TodoCategoryModelUpdateTitel(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Effect> dco_decode_list_effect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_effect).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ProcessingError dco_decode_processing_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ProcessingError_TodoListProcessingError(
          dco_decode_box_autoadd_todo_list_processing_error(raw[1]),
        );
      case 1:
        return ProcessingError_TodoCategoryProcessingError(
          dco_decode_box_autoadd_todo_category_processing_error(raw[1]),
        );
      case 2:
        return ProcessingError_NotPersisted(
          error: dco_decode_String(raw[1]),
          url: dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoCategoryModelCommand dco_decode_todo_category_model_command(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoCategoryModelCommand_SetTodoList(
          dco_decode_box_autoadd_todo_list_model_lock(raw[1]),
        );
      case 1:
        return TodoCategoryModelCommand_UpdateTitle(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoCategoryModelLock dco_decode_todo_category_model_lock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TodoCategoryModelLock(
      model:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
              arr[0]),
    );
  }

  @protected
  TodoCategoryModelQuery dco_decode_todo_category_model_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoCategoryModelQuery_GetTodoCategory(
          dco_decode_bool(raw[1]),
        );
      case 1:
        return TodoCategoryModelQuery_GetTodoCategoryModel();
      case 2:
        return TodoCategoryModelQuery_GetTodoList();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoCategoryProcessingError dco_decode_todo_category_processing_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoCategoryProcessingError_TodoDoesNotExist(
          dco_decode_usize(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoItem dco_decode_todo_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TodoItem(
      text: dco_decode_String(arr[0]),
    );
  }

  @protected
  TodoListModelCommand dco_decode_todo_list_model_command(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoListModelCommand_AddTodo(
          dco_decode_String(raw[1]),
        );
      case 1:
        return TodoListModelCommand_CleanList();
      case 2:
        return TodoListModelCommand_RemoveTodo(
          dco_decode_usize(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoListModelLock dco_decode_todo_list_model_lock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TodoListModelLock(
      model:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
              arr[0]),
    );
  }

  @protected
  TodoListModelQuery dco_decode_todo_list_model_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoListModelQuery_GetAllTodos();
      case 1:
        return TodoListModelQuery_GetTodo(
          dco_decode_usize(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoListProcessingError dco_decode_todo_list_processing_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoListProcessingError_TodoDoesNotExist(
          dco_decode_usize(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  TodoCategoryModel
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
            deserializer);
    return inner;
  }

  @protected
  TodoListModel
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            deserializer);
    return inner;
  }

  @protected
  AppStateDbPersisterError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateDbPersisterErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateFilePersisterError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateFilePersisterErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateImpl
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoCategoryModel
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoCategoryModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoListModel
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoListModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateDbPersisterError
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateDbPersisterErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateFilePersisterError
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateFilePersisterErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateImpl
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoCategoryModel
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoCategoryModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoListModel
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoListModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateDbPersisterError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateDbPersisterErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateFilePersisterError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateFilePersisterErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateImpl
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoCategoryModel
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoCategoryModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoListModel
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoListModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AppConfigImpl sse_decode_app_config_impl(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_appStateUrl = sse_decode_String(deserializer);
    return AppConfigImpl(appStateUrl: var_appStateUrl);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AppConfigImpl sse_decode_box_autoadd_app_config_impl(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_app_config_impl(deserializer));
  }

  @protected
  TodoCategoryModelCommand sse_decode_box_autoadd_todo_category_model_command(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_category_model_command(deserializer));
  }

  @protected
  TodoCategoryModelLock sse_decode_box_autoadd_todo_category_model_lock(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_category_model_lock(deserializer));
  }

  @protected
  TodoCategoryModelQuery sse_decode_box_autoadd_todo_category_model_query(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_category_model_query(deserializer));
  }

  @protected
  TodoCategoryProcessingError
      sse_decode_box_autoadd_todo_category_processing_error(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_category_processing_error(deserializer));
  }

  @protected
  TodoItem sse_decode_box_autoadd_todo_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_item(deserializer));
  }

  @protected
  TodoListModelCommand sse_decode_box_autoadd_todo_list_model_command(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_model_command(deserializer));
  }

  @protected
  TodoListModelLock sse_decode_box_autoadd_todo_list_model_lock(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_model_lock(deserializer));
  }

  @protected
  TodoListModelQuery sse_decode_box_autoadd_todo_list_model_query(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_model_query(deserializer));
  }

  @protected
  TodoListProcessingError sse_decode_box_autoadd_todo_list_processing_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_processing_error(deserializer));
  }

  @protected
  Effect sse_decode_effect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_todo_list_model_lock(deserializer);
        return Effect_TodoListModelRenderTodoList(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_todo_item(deserializer);
        return Effect_TodoListModelRenderTodoItem(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_todo_category_model_lock(deserializer);
        return Effect_TodoCategoryModelRenderTodoCategoryModel(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return Effect_TodoCategoryModelRenderTodoCategory(var_field0);
      case 4:
        var var_field0 =
            sse_decode_box_autoadd_todo_list_model_lock(deserializer);
        return Effect_TodoCategoryModelRenderTodoList(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return Effect_TodoCategoryModelUpdateTitel(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Effect> sse_decode_list_effect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Effect>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_effect(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ProcessingError sse_decode_processing_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_todo_list_processing_error(deserializer);
        return ProcessingError_TodoListProcessingError(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_todo_category_processing_error(deserializer);
        return ProcessingError_TodoCategoryProcessingError(var_field0);
      case 2:
        var var_error = sse_decode_String(deserializer);
        var var_url = sse_decode_String(deserializer);
        return ProcessingError_NotPersisted(error: var_error, url: var_url);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoCategoryModelCommand sse_decode_todo_category_model_command(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_todo_list_model_lock(deserializer);
        return TodoCategoryModelCommand_SetTodoList(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return TodoCategoryModelCommand_UpdateTitle(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoCategoryModelLock sse_decode_todo_category_model_lock(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_model =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
            deserializer);
    return TodoCategoryModelLock(model: var_model);
  }

  @protected
  TodoCategoryModelQuery sse_decode_todo_category_model_query(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return TodoCategoryModelQuery_GetTodoCategory(var_field0);
      case 1:
        return TodoCategoryModelQuery_GetTodoCategoryModel();
      case 2:
        return TodoCategoryModelQuery_GetTodoList();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoCategoryProcessingError sse_decode_todo_category_processing_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_usize(deserializer);
        return TodoCategoryProcessingError_TodoDoesNotExist(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoItem sse_decode_todo_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_text = sse_decode_String(deserializer);
    return TodoItem(text: var_text);
  }

  @protected
  TodoListModelCommand sse_decode_todo_list_model_command(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return TodoListModelCommand_AddTodo(var_field0);
      case 1:
        return TodoListModelCommand_CleanList();
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        return TodoListModelCommand_RemoveTodo(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoListModelLock sse_decode_todo_list_model_lock(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_model =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            deserializer);
    return TodoListModelLock(model: var_model);
  }

  @protected
  TodoListModelQuery sse_decode_todo_list_model_query(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return TodoListModelQuery_GetAllTodos();
      case 1:
        var var_field0 = sse_decode_usize(deserializer);
        return TodoListModelQuery_GetTodo(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoListProcessingError sse_decode_todo_list_processing_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_usize(deserializer);
        return TodoListProcessingError_TodoDoesNotExist(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          TodoCategoryModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          AppStateDbPersisterError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateDbPersisterErrorImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          AppStateFilePersisterError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateFilePersisterErrorImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          AppStateImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateImplImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          TodoCategoryModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoCategoryModelImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoListModelImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          AppStateDbPersisterError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateDbPersisterErrorImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          AppStateFilePersisterError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateFilePersisterErrorImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          AppStateImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          TodoCategoryModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoCategoryModelImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoListModelImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateDBPersisterError(
          AppStateDbPersisterError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateDbPersisterErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateFilePersisterError(
          AppStateFilePersisterError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateFilePersisterErrorImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          AppStateImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateImplImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
          TodoCategoryModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoCategoryModelImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoListModelImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_app_config_impl(
      AppConfigImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.appStateUrl, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_app_config_impl(
      AppConfigImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_app_config_impl(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_category_model_command(
      TodoCategoryModelCommand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_category_model_command(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_category_model_lock(
      TodoCategoryModelLock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_category_model_lock(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_category_model_query(
      TodoCategoryModelQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_category_model_query(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_category_processing_error(
      TodoCategoryProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_category_processing_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_item(
      TodoItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_item(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_model_command(
      TodoListModelCommand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_model_command(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_model_lock(
      TodoListModelLock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_model_lock(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_model_query(
      TodoListModelQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_model_query(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_processing_error(
      TodoListProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_processing_error(self, serializer);
  }

  @protected
  void sse_encode_effect(Effect self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Effect_TodoListModelRenderTodoList(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_todo_list_model_lock(field0, serializer);
      case Effect_TodoListModelRenderTodoItem(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_todo_item(field0, serializer);
      case Effect_TodoCategoryModelRenderTodoCategoryModel(
          field0: final field0
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_todo_category_model_lock(field0, serializer);
      case Effect_TodoCategoryModelRenderTodoCategory(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case Effect_TodoCategoryModelRenderTodoList(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_todo_list_model_lock(field0, serializer);
      case Effect_TodoCategoryModelUpdateTitel(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_effect(List<Effect> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_effect(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_processing_error(
      ProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ProcessingError_TodoListProcessingError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_todo_list_processing_error(field0, serializer);
      case ProcessingError_TodoCategoryProcessingError(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_todo_category_processing_error(
            field0, serializer);
      case ProcessingError_NotPersisted(error: final error, url: final url):
        sse_encode_i_32(2, serializer);
        sse_encode_String(error, serializer);
        sse_encode_String(url, serializer);
    }
  }

  @protected
  void sse_encode_todo_category_model_command(
      TodoCategoryModelCommand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoCategoryModelCommand_SetTodoList(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_todo_list_model_lock(field0, serializer);
      case TodoCategoryModelCommand_UpdateTitle(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_todo_category_model_lock(
      TodoCategoryModelLock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoCategoryModel(
        self.model, serializer);
  }

  @protected
  void sse_encode_todo_category_model_query(
      TodoCategoryModelQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoCategoryModelQuery_GetTodoCategory(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case TodoCategoryModelQuery_GetTodoCategoryModel():
        sse_encode_i_32(1, serializer);
      case TodoCategoryModelQuery_GetTodoList():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_todo_category_processing_error(
      TodoCategoryProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoCategoryProcessingError_TodoDoesNotExist(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_usize(field0, serializer);
    }
  }

  @protected
  void sse_encode_todo_item(TodoItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.text, serializer);
  }

  @protected
  void sse_encode_todo_list_model_command(
      TodoListModelCommand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoListModelCommand_AddTodo(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case TodoListModelCommand_CleanList():
        sse_encode_i_32(1, serializer);
      case TodoListModelCommand_RemoveTodo(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
    }
  }

  @protected
  void sse_encode_todo_list_model_lock(
      TodoListModelLock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
        self.model, serializer);
  }

  @protected
  void sse_encode_todo_list_model_query(
      TodoListModelQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoListModelQuery_GetAllTodos():
        sse_encode_i_32(0, serializer);
      case TodoListModelQuery_GetTodo(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(field0, serializer);
    }
  }

  @protected
  void sse_encode_todo_list_processing_error(
      TodoListProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoListProcessingError_TodoDoesNotExist(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_usize(field0, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class AppStateDbPersisterErrorImpl extends RustOpaque
    implements AppStateDbPersisterError {
  // Not to be used by end users
  AppStateDbPersisterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AppStateDbPersisterErrorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_AppStateDbPersisterError,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_AppStateDbPersisterError,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_AppStateDbPersisterErrorPtr,
  );

  /// convert to ProcessingError::NotPersisted
  Future<ProcessingError> toProcessingError() => RustLib.instance.api
          .crateInfrastructureAppStateDbPersisterAppStateDbPersisterErrorToProcessingError(
        that: this,
      );
}

@sealed
class AppStateFilePersisterErrorImpl extends RustOpaque
    implements AppStateFilePersisterError {
  // Not to be used by end users
  AppStateFilePersisterErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AppStateFilePersisterErrorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_AppStateFilePersisterError,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_AppStateFilePersisterError,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_AppStateFilePersisterErrorPtr,
  );

  /// convert to ProcessingError::NotPersisted
  Future<ProcessingError> toProcessingError() => RustLib.instance.api
          .crateInfrastructureAppStateFilePersisterAppStateFilePersisterErrorToProcessingError(
        that: this,
      );
}

@sealed
class AppStateImplImpl extends RustOpaque implements AppStateImpl {
  // Not to be used by end users
  AppStateImplImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AppStateImplImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AppStateImpl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AppStateImpl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AppStateImplPtr,
  );

  Future<bool> dirtyFlagValue() =>
      RustLib.instance.api.crateApplicationAppStateAppStateImplDirtyFlagValue(
        that: this,
      );

  Future<void> markDirty() =>
      RustLib.instance.api.crateApplicationAppStateAppStateImplMarkDirty(
        that: this,
      );

  Future<void> markPersisted() =>
      RustLib.instance.api.crateApplicationAppStateAppStateImplMarkPersisted(
        that: this,
      );
}

@sealed
class LifecycleImplImpl extends RustOpaque implements LifecycleImpl {
  // Not to be used by end users
  LifecycleImplImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LifecycleImplImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LifecycleImpl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LifecycleImpl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LifecycleImplPtr,
  );

  AppConfigImpl get appConfig => RustLib.instance.api
          .crateApplicationApiLifecycleLifecycleImplAutoAccessorGetAppConfig(
        that: this,
      );

  set appConfig(AppConfigImpl appConfig) => RustLib.instance.api
      .crateApplicationApiLifecycleLifecycleImplAutoAccessorSetAppConfig(
          that: this, appConfig: appConfig);
}

@sealed
class TodoCategoryModelImpl extends RustOpaque implements TodoCategoryModel {
  // Not to be used by end users
  TodoCategoryModelImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TodoCategoryModelImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TodoCategoryModel,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TodoCategoryModel,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_TodoCategoryModelPtr,
  );

  /// This is how to access the fields of a heavy object behind a RustAutoOpaque.
  /// This is copying parts the content, which Dart needs to show to the user.
  ///
  /// If `items` would be `pub` FRB would automatically create a getter. However, this
  /// getter would `clone()` the `items` as well. As we pretend that a single item
  /// is heavy to clone, we use a custom function to `clone()` only the lightweight and
  /// only needed part for presentation.
  Future<String> getTitle() =>
      RustLib.instance.api.crateDomainTodoCategoryTodoCategoryModelGetTitle(
        that: this,
      );

  Future<TodoListModelLock> getTodoListLock() => RustLib.instance.api
          .crateDomainTodoCategoryTodoCategoryModelGetTodoListLock(
        that: this,
      );

  Future<List<String>> getTodos() =>
      RustLib.instance.api.crateDomainTodoCategoryTodoCategoryModelGetTodos(
        that: this,
      );
}

@sealed
class TodoListModelImpl extends RustOpaque implements TodoListModel {
  // Not to be used by end users
  TodoListModelImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TodoListModelImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TodoListModel,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TodoListModel,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TodoListModelPtr,
  );

  /// This is how to access the fields of a heavy object behind a RustAutoOpaque.
  /// This is copying parts the content, which Dart needs to show to the user.
  ///
  /// If `items` would be `pub` FRB would automatically create a getter. However, this
  /// getter would `clone()` the `items` as well. As we pretend that a single item
  /// is heavy to clone, we use a custom function to `clone()` only the lightweight and
  /// only needed part for presentation.
  Future<List<String>> getTodosAsString() =>
      RustLib.instance.api.crateDomainTodoListTodoListModelGetTodosAsString(
        that: this,
      );
}
