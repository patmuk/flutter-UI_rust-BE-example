// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'application/api/lifecycle.dart';
import 'application/app_state.dart';
import 'dart:async';
import 'dart:convert';
import 'domain/todo_list.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => -1488086117;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'app_core',
    ioDirectory: '../app_core/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  PathBuf
      crateApplicationApiLifecycleAppConfigImplAutoAccessorGetAppStateFilePath(
          {required AppConfigImpl that});

  void crateApplicationApiLifecycleAppConfigImplAutoAccessorSetAppStateFilePath(
      {required AppConfigImpl that, required PathBuf appStateFilePath});

  Future<AppConfigImpl> crateApplicationApiLifecycleAppConfigImplDefault();

  Future<void> crateApplicationApiLifecycleAppConfigImplGetAppStateFilePath(
      {required AppConfigImpl that});

  Future<AppConfigImpl> crateApplicationApiLifecycleAppConfigImplNew(
      {String? path});

  Future<void> crateApplicationApiLifecycleLifecycleImplAppConfig(
      {required LifecycleImpl that});

  Future<void> crateApplicationApiLifecycleLifecycleImplAppState(
      {required LifecycleImpl that});

  Future<void> crateApplicationApiLifecycleLifecycleImplGetSingleton();

  Future<void> crateApplicationApiLifecycleLifecycleImplNew({String? path});

  Future<void> crateApplicationApiLifecycleLifecycleImplPersist(
      {required LifecycleImpl that});

  Future<void> crateApplicationApiLifecycleLifecycleImplShutdown(
      {required LifecycleImpl that});

  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelCommandProcess(
      {required TodoListModelCommand that});

  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelQueryProcess(
      {required TodoListModelQuery that});

  Future<bool> crateApplicationAppStateAppStateImplDirtyFlagValue(
      {required AppStateImpl that});

  Future<void> crateApplicationAppStateAppStateImplMarkDirty(
      {required AppStateImpl that});

  Future<void> crateApplicationAppStateAppStateImplPersistToPath(
      {required AppStateImpl that, required PathBuf path});

  Future<TodoListModel> crateDomainTodoListTodoListModelDefault();

  Future<List<String>> crateDomainTodoListTodoListModelGetTodosAsString(
      {required TodoListModel that});

  Future<TodoListModel> crateDomainTodoListTodoListModelNew();

  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockDefault();

  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockNew();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppConfigImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppConfigImpl;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AppConfigImplPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateImpl;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AppStateImplPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LifecycleImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LifecycleImpl;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LifecycleImplPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProcessingError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProcessingError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProcessingErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TodoListModel;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TodoListModel;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TodoListModelPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  PathBuf
      crateApplicationApiLifecycleAppConfigImplAutoAccessorGetAppStateFilePath(
          {required AppConfigImpl that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleAppConfigImplAutoAccessorGetAppStateFilePathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleAppConfigImplAutoAccessorGetAppStateFilePathConstMeta =>
          const TaskConstMeta(
            debugName: "AppConfigImpl_auto_accessor_get_app_state_file_path",
            argNames: ["that"],
          );

  @override
  void crateApplicationApiLifecycleAppConfigImplAutoAccessorSetAppStateFilePath(
      {required AppConfigImpl that, required PathBuf appStateFilePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            appStateFilePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleAppConfigImplAutoAccessorSetAppStateFilePathConstMeta,
      argValues: [that, appStateFilePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleAppConfigImplAutoAccessorSetAppStateFilePathConstMeta =>
          const TaskConstMeta(
            debugName: "AppConfigImpl_auto_accessor_set_app_state_file_path",
            argNames: ["that", "appStateFilePath"],
          );

  @override
  Future<AppConfigImpl> crateApplicationApiLifecycleAppConfigImplDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationApiLifecycleAppConfigImplDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleAppConfigImplDefaultConstMeta =>
          const TaskConstMeta(
            debugName: "AppConfigImpl_default",
            argNames: [],
          );

  @override
  Future<void> crateApplicationApiLifecycleAppConfigImplGetAppStateFilePath(
      {required AppConfigImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleAppConfigImplGetAppStateFilePathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleAppConfigImplGetAppStateFilePathConstMeta =>
          const TaskConstMeta(
            debugName: "AppConfigImpl_get_app_state_file_path",
            argNames: ["that"],
          );

  @override
  Future<AppConfigImpl> crateApplicationApiLifecycleAppConfigImplNew(
      {String? path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationApiLifecycleAppConfigImplNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApplicationApiLifecycleAppConfigImplNewConstMeta =>
      const TaskConstMeta(
        debugName: "AppConfigImpl_new",
        argNames: ["path"],
      );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplAppConfig(
      {required LifecycleImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplAppConfigConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplAppConfigConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_app_config",
            argNames: ["that"],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplAppState(
      {required LifecycleImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplAppStateConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplAppStateConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_app_state",
            argNames: ["that"],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplGetSingleton() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApplicationApiLifecycleLifecycleImplGetSingletonConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplGetSingletonConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_get_singleton",
            argNames: [],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplNew({String? path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApplicationApiLifecycleLifecycleImplNewConstMeta =>
      const TaskConstMeta(
        debugName: "LifecycleImpl_new",
        argNames: ["path"],
      );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplPersist(
      {required LifecycleImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplPersistConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplPersistConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_persist",
            argNames: ["that"],
          );

  @override
  Future<void> crateApplicationApiLifecycleLifecycleImplShutdown(
      {required LifecycleImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApplicationApiLifecycleLifecycleImplShutdownConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleLifecycleImplShutdownConstMeta =>
          const TaskConstMeta(
            debugName: "LifecycleImpl_shutdown",
            argNames: ["that"],
          );

  @override
  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelCommandProcess(
      {required TodoListModelCommand that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_todo_list_model_command(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_effect,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError,
      ),
      constMeta:
          kCrateApplicationApiLifecycleTodoListModelCommandProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleTodoListModelCommandProcessConstMeta =>
          const TaskConstMeta(
            debugName: "todo_list_model_command_process",
            argNames: ["that"],
          );

  @override
  Future<List<Effect>> crateApplicationApiLifecycleTodoListModelQueryProcess(
      {required TodoListModelQuery that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_todo_list_model_query(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_effect,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError,
      ),
      constMeta:
          kCrateApplicationApiLifecycleTodoListModelQueryProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationApiLifecycleTodoListModelQueryProcessConstMeta =>
          const TaskConstMeta(
            debugName: "todo_list_model_query_process",
            argNames: ["that"],
          );

  @override
  Future<bool> crateApplicationAppStateAppStateImplDirtyFlagValue(
      {required AppStateImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationAppStateAppStateImplDirtyFlagValueConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationAppStateAppStateImplDirtyFlagValueConstMeta =>
          const TaskConstMeta(
            debugName: "AppStateImpl_dirty_flag_value",
            argNames: ["that"],
          );

  @override
  Future<void> crateApplicationAppStateAppStateImplMarkDirty(
      {required AppStateImpl that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApplicationAppStateAppStateImplMarkDirtyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApplicationAppStateAppStateImplMarkDirtyConstMeta =>
      const TaskConstMeta(
        debugName: "AppStateImpl_mark_dirty",
        argNames: ["that"],
      );

  @override
  Future<void> crateApplicationAppStateAppStateImplPersistToPath(
      {required AppStateImpl that, required PathBuf path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
            that, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApplicationAppStateAppStateImplPersistToPathConstMeta,
      argValues: [that, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApplicationAppStateAppStateImplPersistToPathConstMeta =>
          const TaskConstMeta(
            debugName: "AppStateImpl_persist_to_path",
            argNames: ["that", "path"],
          );

  @override
  Future<TodoListModel> crateDomainTodoListTodoListModelDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "TodoListModel_default",
        argNames: [],
      );

  @override
  Future<List<String>> crateDomainTodoListTodoListModelGetTodosAsString(
      {required TodoListModel that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelGetTodosAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateDomainTodoListTodoListModelGetTodosAsStringConstMeta =>
          const TaskConstMeta(
            debugName: "TodoListModel_get_todos_as_string",
            argNames: ["that"],
          );

  @override
  Future<TodoListModel> crateDomainTodoListTodoListModelNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelNewConstMeta =>
      const TaskConstMeta(
        debugName: "TodoListModel_new",
        argNames: [],
      );

  @override
  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_todo_list_model_lock,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelLockDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelLockDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "todo_list_model_lock_default",
        argNames: [],
      );

  @override
  Future<TodoListModelLock> crateDomainTodoListTodoListModelLockNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_todo_list_model_lock,
        decodeErrorData: null,
      ),
      constMeta: kCrateDomainTodoListTodoListModelLockNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateDomainTodoListTodoListModelLockNewConstMeta =>
      const TaskConstMeta(
        debugName: "todo_list_model_lock_new",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppConfigImpl => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppConfigImpl => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AppStateImpl => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AppStateImpl => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LifecycleImpl => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LifecycleImpl => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PathBuf => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PathBuf => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProcessingError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProcessingError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TodoListModel => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TodoListModel => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  TodoListModel
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
        raw);
  }

  @protected
  AppConfigImpl
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppStateImpl
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProcessingError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProcessingErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoListModel
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoListModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppConfigImpl
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppConfigImpl
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppStateImpl
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoListModel
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoListModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppConfigImpl
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AppStateImpl
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppStateImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  LifecycleImpl
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProcessingError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProcessingErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TodoListModel
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TodoListModelImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AppConfig dco_decode_TraitDef_AppConfig(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  AppState dco_decode_TraitDef_AppState(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  Cqrs dco_decode_TraitDef_Cqrs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  CqrsModel dco_decode_TraitDef_CqrsModel(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  CqrsModelLock dco_decode_TraitDef_CqrsModelLock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  Lifecycle dco_decode_TraitDef_Lifecycle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  TodoItem dco_decode_box_autoadd_todo_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_item(raw);
  }

  @protected
  TodoListModelCommand dco_decode_box_autoadd_todo_list_model_command(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_model_command(raw);
  }

  @protected
  TodoListModelLock dco_decode_box_autoadd_todo_list_model_lock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_model_lock(raw);
  }

  @protected
  TodoListModelQuery dco_decode_box_autoadd_todo_list_model_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_todo_list_model_query(raw);
  }

  @protected
  Effect dco_decode_effect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Effect_TodoListModelRenderTodoList(
          dco_decode_box_autoadd_todo_list_model_lock(raw[1]),
        );
      case 1:
        return Effect_TodoListModelRenderTodoItem(
          dco_decode_box_autoadd_todo_item(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Effect> dco_decode_list_effect(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_effect).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  TodoItem dco_decode_todo_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TodoItem(
      text: dco_decode_String(arr[0]),
    );
  }

  @protected
  TodoListModelCommand dco_decode_todo_list_model_command(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return TodoListModelCommand_AddTodo(
          dco_decode_String(raw[1]),
        );
      case 1:
        return const TodoListModelCommand_CleanList();
      case 2:
        return TodoListModelCommand_RemoveTodo(
          dco_decode_usize(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  TodoListModelLock dco_decode_todo_list_model_lock(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TodoListModelLock(
      lock:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
              arr[0]),
    );
  }

  @protected
  TodoListModelQuery dco_decode_todo_list_model_query(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return const TodoListModelQuery_GetAllTodos();
      case 1:
        return TodoListModelQuery_GetTodo(
          dco_decode_usize(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  TodoListModel
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            deserializer);
    return inner;
  }

  @protected
  AppConfigImpl
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateImpl
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProcessingError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProcessingErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoListModel
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoListModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppConfigImpl
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppConfigImpl
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateImpl
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoListModel
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoListModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppConfigImpl
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppConfigImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AppStateImpl
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppStateImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LifecycleImpl
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LifecycleImplImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProcessingError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProcessingErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TodoListModel
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TodoListModelImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  TodoItem sse_decode_box_autoadd_todo_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_item(deserializer));
  }

  @protected
  TodoListModelCommand sse_decode_box_autoadd_todo_list_model_command(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_model_command(deserializer));
  }

  @protected
  TodoListModelLock sse_decode_box_autoadd_todo_list_model_lock(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_model_lock(deserializer));
  }

  @protected
  TodoListModelQuery sse_decode_box_autoadd_todo_list_model_query(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_todo_list_model_query(deserializer));
  }

  @protected
  Effect sse_decode_effect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_todo_list_model_lock(deserializer);
        return Effect_TodoListModelRenderTodoList(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_todo_item(deserializer);
        return Effect_TodoListModelRenderTodoItem(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Effect> sse_decode_list_effect(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Effect>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_effect(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TodoItem sse_decode_todo_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_text = sse_decode_String(deserializer);
    return TodoItem(text: var_text);
  }

  @protected
  TodoListModelCommand sse_decode_todo_list_model_command(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return TodoListModelCommand_AddTodo(var_field0);
      case 1:
        return const TodoListModelCommand_CleanList();
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        return TodoListModelCommand_RemoveTodo(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  TodoListModelLock sse_decode_todo_list_model_lock(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_lock =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
            deserializer);
    return TodoListModelLock(lock: var_lock);
  }

  @protected
  TodoListModelQuery sse_decode_todo_list_model_query(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return const TodoListModelQuery_GetAllTodos();
      case 1:
        var var_field0 = sse_decode_usize(deserializer);
        return TodoListModelQuery_GetTodo(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          AppConfigImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppConfigImplImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          AppStateImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateImplImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError(
          ProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProcessingErrorImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoListModelImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          AppConfigImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppConfigImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          AppConfigImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppConfigImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          AppStateImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoListModelImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppConfigImpl(
          AppConfigImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppConfigImplImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAppStateImpl(
          AppStateImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppStateImplImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLifecycleImpl(
          LifecycleImpl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LifecycleImplImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerProcessingError(
          ProcessingError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProcessingErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
          TodoListModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TodoListModelImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_todo_item(
      TodoItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_item(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_model_command(
      TodoListModelCommand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_model_command(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_model_lock(
      TodoListModelLock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_model_lock(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_todo_list_model_query(
      TodoListModelQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_todo_list_model_query(self, serializer);
  }

  @protected
  void sse_encode_effect(Effect self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Effect_TodoListModelRenderTodoList(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_todo_list_model_lock(field0, serializer);
      case Effect_TodoListModelRenderTodoItem(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_todo_item(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_effect(List<Effect> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_effect(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_todo_item(TodoItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.text, serializer);
  }

  @protected
  void sse_encode_todo_list_model_command(
      TodoListModelCommand self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoListModelCommand_AddTodo(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case TodoListModelCommand_CleanList():
        sse_encode_i_32(1, serializer);
      case TodoListModelCommand_RemoveTodo(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_todo_list_model_lock(
      TodoListModelLock self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTodoListModel(
        self.lock, serializer);
  }

  @protected
  void sse_encode_todo_list_model_query(
      TodoListModelQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case TodoListModelQuery_GetAllTodos():
        sse_encode_i_32(0, serializer);
      case TodoListModelQuery_GetTodo(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class AppConfigImplImpl extends RustOpaque implements AppConfigImpl {
  // Not to be used by end users
  AppConfigImplImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AppConfigImplImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AppConfigImpl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AppConfigImpl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AppConfigImplPtr,
  );

  PathBuf get appStateFilePath => RustLib.instance.api
          .crateApplicationApiLifecycleAppConfigImplAutoAccessorGetAppStateFilePath(
        that: this,
      );

  set appStateFilePath(PathBuf appStateFilePath) => RustLib.instance.api
      .crateApplicationApiLifecycleAppConfigImplAutoAccessorSetAppStateFilePath(
          that: this, appStateFilePath: appStateFilePath);

  Future<void> getAppStateFilePath() => RustLib.instance.api
          .crateApplicationApiLifecycleAppConfigImplGetAppStateFilePath(
        that: this,
      );
}

@sealed
class AppStateImplImpl extends RustOpaque implements AppStateImpl {
  // Not to be used by end users
  AppStateImplImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AppStateImplImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AppStateImpl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AppStateImpl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AppStateImplPtr,
  );

  Future<bool> dirtyFlagValue() =>
      RustLib.instance.api.crateApplicationAppStateAppStateImplDirtyFlagValue(
        that: this,
      );

  Future<void> markDirty() =>
      RustLib.instance.api.crateApplicationAppStateAppStateImplMarkDirty(
        that: this,
      );

  Future<void> persistToPath({required PathBuf path}) =>
      RustLib.instance.api.crateApplicationAppStateAppStateImplPersistToPath(
          that: this, path: path);
}

@sealed
class LifecycleImplImpl extends RustOpaque implements LifecycleImpl {
  // Not to be used by end users
  LifecycleImplImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LifecycleImplImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_LifecycleImpl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_LifecycleImpl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LifecycleImplPtr,
  );

  Future<void> appConfig() =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleImplAppConfig(
        that: this,
      );

  Future<void> appState() =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleImplAppState(
        that: this,
      );

  /// persist the app state to the previously stored location
  Future<void> persist() =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleImplPersist(
        that: this,
      );

  Future<void> shutdown() =>
      RustLib.instance.api.crateApplicationApiLifecycleLifecycleImplShutdown(
        that: this,
      );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class ProcessingErrorImpl extends RustOpaque implements ProcessingError {
  // Not to be used by end users
  ProcessingErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProcessingErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ProcessingError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProcessingError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ProcessingErrorPtr,
  );
}

@sealed
class TodoListModelImpl extends RustOpaque implements TodoListModel {
  // Not to be used by end users
  TodoListModelImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TodoListModelImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TodoListModel,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TodoListModel,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TodoListModelPtr,
  );

  /// This is how to access the fields of a heavy object behind a RustAutoOpaque.
  /// This is copying parts the content, which Dart needs to show to the user.
  ///
  /// If `items` would be `pub` FRB would automatically create a getter. However, this
  /// getter would `clone()` the `items` as well. As we pretend that a single item
  /// is heavy to clone, we use a custom function to `clone()` only the lightweight and
  /// only needed part for presentation.
  Future<List<String>> getTodosAsString() =>
      RustLib.instance.api.crateDomainTodoListTodoListModelGetTodosAsString(
        that: this,
      );
}
